// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transactions.AccessData;

#nullable disable

namespace Transactions.AccessData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221020194135_trx-db")]
    partial class trxdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Transactions.Domain.Entities.MovementHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier");

                    b.Property<decimal>("AmountTransaction")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("CuilEmisorCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("CuilReceiverCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("DateTimeTransaction")
                        .HasColumnType("DateTime");

                    b.Property<string>("DniEmisorCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DniReceiverCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("UniqueIdentifier");

                    b.Property<string>("FromCbu")
                        .IsRequired()
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("FullNameEmisorCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameReceiverCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultingStateOfTransaction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("UniqueIdentifier");

                    b.Property<string>("ToCbu")
                        .IsRequired()
                        .HasColumnType("nvarchar(22)");

                    b.HasKey("Id");

                    b.ToTable("MovementHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cc7cc14-3f27-441f-9d6f-f343dc0beb18"),
                            AmountTransaction = 10000.5m,
                            CuilEmisorCustomer = "12-33123123-8",
                            CuilReceiverCustomer = "12-22123123-8",
                            Currency = "ARS",
                            DateTimeTransaction = new DateTime(2022, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DniEmisorCustomer = "33.123.123",
                            DniReceiverCustomer = "22.123.123",
                            FromAccountId = new Guid("7a9be41e-a0ce-4a2c-bb97-2a51330ee1eb"),
                            FromCbu = "123456789",
                            FullNameEmisorCustomer = "Carlos Franco",
                            FullNameReceiverCustomer = "Luciano Franco",
                            OperationType = "TRANSFERENCIA ENTRE CUENTAS DE DIFERENTE TITULAR",
                            ResultingStateOfTransaction = "TRX SUCCESS",
                            ToAccountId = new Guid("8e316f1a-85d3-462c-bb3d-98ef3456eb62"),
                            ToCbu = "987654321"
                        });
                });

            modelBuilder.Entity("Transactions.Domain.Entities.OperationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TRANSFERENCIA ENTRE CUENTAS DE MISMO TITULAR"
                        },
                        new
                        {
                            Id = 2,
                            Name = "TRANSFERENCIA ENTRE CUENTAS DE DIFERENTE TITULAR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "INGRESO DE DINERO POR VENTANILLA"
                        },
                        new
                        {
                            Id = 4,
                            Name = "EXTRACCION DE DINERO POR VENTANILLA"
                        });
                });

            modelBuilder.Entity("Transactions.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("DateTime");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("UniqueIdentifier");

                    b.Property<int>("OperationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("UniqueIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("State");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Transactions.Domain.Entities.TransactionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("TransactionState", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TRX SUCCESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "TRX REJECTED"
                        },
                        new
                        {
                            Id = 3,
                            Name = "TRX PENDING"
                        });
                });

            modelBuilder.Entity("Transactions.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Transactions.Domain.Entities.OperationType", "OperationType")
                        .WithMany("Transactions")
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transactions.Domain.Entities.TransactionState", "TransactionState")
                        .WithMany("Transactions")
                        .HasForeignKey("State")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationType");

                    b.Navigation("TransactionState");
                });

            modelBuilder.Entity("Transactions.Domain.Entities.OperationType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Transactions.Domain.Entities.TransactionState", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
